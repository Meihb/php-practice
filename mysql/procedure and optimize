#创建联合索引对查询的优化

#联合索引设置为hash或者Bitree的区别
#很明显,hash在数据多而查询方式固定的情况下占优,简单来说hash肯定无法满足最左原则,也无法满足条件查询,对于等值查询且条件固定的情况,hash优于bitree;而使用到最左原则(即查询条件非固定)或者
#包含范围查询(><等)使用bitree为先;
#PS. 大文件sql导入还是mysqlworkbench有用。

#原mysql语句


EXPLAIN SELECT character_name, data32_0, subtype, data_date, tribe, gender
        FROM `FF14_IshgardianRank20200814_details`
        WHERE 1
          AND data_date = '2020-08-28'
          AND area_id = 1
          AND group_id = 27
          AND subtype = 0
          AND status = 1
        ORDER BY data_32_0 desc
        limit 100;

#实践证明,bitree的最左原则和你的where条件顺序是无关的,也即是说 联合索引(a,b,c),如果查询顺序是b=?,c=?,a=?也会被optimizer优化,无须担心;当然最左原则的匹配是要求是(a)或(ab)或(abc)
#切记,(bc)或(c)显然无法匹配
#那么(ac)是否可以匹配呢,根据实践证明,无法匹配 也不算无法匹配,如果你有单独的a索引,那就不会匹配联合索引,否则还是勉为其难使用,所以也不能算是无法匹配,只有(b)、(bc)、(c)无发匹配
#拜托您看过Bitree实现方式好不好啊,还要求实践,脑仁如核桃

#插播一下
select (select 1 from actor where id = 1)
from (select * from film where id = 1) der;
#+----+-------------+------------+--------+---------------+---------+---------+-------+------+-------------+
#    | id | select_type | table      | type   | possible_keys | key     | key_len | ref   | rows | Extra       |
#    +----+-------------+------------+--------+---------------+---------+---------+-------+------+-------------+
#   |  1 | PRIMARY     | <derived3> | system | NULL          | NULL    | NULL    | NULL  |    1 | NULL        |
#    |  3 | DERIVED     | film       | const  | PRIMARY       | PRIMARY | 4       | const |    1 | NULL        |
#    |  2 | SUBQUERY    | actor      | const  | PRIMARY       | PRIMARY | 4       | const |    1 | Using index |
#   +----+-------------+------------+--------+---------------+---------+---------+-------+------+-------------+
#derived 派生的 表示from 中的子查询
#subquery select 中的子查询
# 该例子中表示复制 1{ actor[id=1]} *select *from file where id =1 次


#言归正传
#Using filesort：mysql 会对结果使用一个外部索引排序，而不是按索引次序从表里读取行。此时mysql会根据联接类型浏览所有符合条件的记录，并保存排序关键字和行指针，
# 然后排序关键字并按顺序检索行信息。这种情况下一般也是要考虑使用索引来优化的。
#可是如果你设置了很多的索引,结果导致索引文件较大甚至和数据文件一样大,那就需要你思考思考怎么减小索引大小了
#比如说 可为null的字段 格外需要一个字节,这是一个方向,int是否可以根据使用场景改成tinyint从而缩小存储长度等

#extra一些讨论
#useing index 表示使用到了索引,且select的column也包含在索引中,所以无需回表
#using where optimizer


